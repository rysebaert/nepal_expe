---
title: "View data"
format: dashboard
---

# By peaks

##  {.toolbar}

```{ojs}
//| echo: false
viewof prop_ind = Inputs.select(new Map(metadata.filter(d => d.type == "stock").map((d) => [d.description, d.id])), {label:"Indicator 1 : Circles", value: "pos"})
```

```{ojs}
//| echo: false
viewof choro_ind = Inputs.select(new Map(metadata.filter(d => d.type == "ratio").map((d) => [d.description, d.id])), {label:"Indicator 2: Color palette", value: "HEIGHTM"})
```

```{ojs}
//| echo: false
viewof tiles = Inputs.select(["worldStreet", "openstreetmap", "worldimagery", "opentopomap"], {
  label: "Tiles",
  value: "worldimagery"
})
```

```{ojs}
//| echo: false
viewof k = Inputs.range([4, 50], { label: "Circle size", step: 1, value:30 })
```

## Row {width="200%"}

<center>

```{ojs}
//| echo: false
svg = viz.create({
    width: 800, 
    domain: peaks, 
    margin: 150,
    projection: d3.geoMercator(),
    zoomable: true})
tile = svg.tile({url: tiles, id: "tile" })
symb = svg.plot({type: "propchoro", id: "symb",
            data: peaks,
            var1: prop_ind,
            var2: choro_ind,
            breaks: bks,
            fixmax: valmax,
            colors: "Sunset",
            tip: `$PKCONSO`,
            k,
            leg1_title: "Indicator 1",
            leg1_frame: true,
            leg1_frame_fill : "white",
            leg1_frame_stroke: "#ffffff50",
            leg2_title: "Indicator 2",
            leg2_frame: true,
            leg2_frame_fill : "white",
            leg2_frame_stroke: "#ffffff50"});
scale = svg.scalebar({id: "scale"});
svg.render({order: [tile, symb, scale]})
```

</center>

# Peaks table {scrolling="true"}

```{ojs}

Inputs.table(data_peaks, {
  format: {
    HEIGHTM: sparkbar(d3.max(data_peaks, d => d.HEIGHTM)),  
    TOTDAYS: sparkbar(d3.max(data_peaks, d => d.TOTDAYS)),
    EXPE_TOT: sparkbar(d3.max(data_peaks, d => d.EXPE_TOT)),
    EXPE_SUCCESS: sparkbar(d3.max(data_peaks, d => d.EXPE_TOT)),    
    EXPE_HIRED: sparkbar(d3.max(data_peaks, d => d.EXPE_TOT)),
    EXPE_DEATH: sparkbar(d3.max(data_peaks, d => d.EXPE_TOT)),
    MEMBERS_TOT: sparkbar(d3.max(data_peaks, d => d.MEMBERS_TOT)),
    MEMBERS_SUCCESS: sparkbar(d3.max(data_peaks, d => d.MEMBERS_TOT)),    
    MEMBERS_HIRED: sparkbar(d3.max(data_peaks, d => d.MEMBERS_TOT)),
    MEMBERS_DEATH: sparkbar(d3.max(data_peaks, d => d.MEMBERS_TOT)),
    EXPE_SUCCESS_RT: sparkbar(d3.max(data_peaks, d => d.EXPE_SUCCESS_RT)),    
    EXPE_HIRED_RT: sparkbar(d3.max(data_peaks, d => d.EXPE_SUCCESS_RT)),        
    EXPE_DEATH_RT: sparkbar(d3.max(data_peaks, d => d.EXPE_SUCCESS_RT)),
    MEMBERS_SUCCESS_RT: sparkbar(d3.max(data_peaks, d => d.MEMBERS_SUCCESS_RT)),    
    MEMBERS_HIRED_RT: sparkbar(d3.max(data_peaks, d => d.MEMBERS_SUCCESS_RT)),        
    MEMBERS_DEATH_RT: sparkbar(d3.max(data_peaks, d => d.MEMBERS_SUCCESS_RT))
  },
  rows:1000
})

```

# By country

##  {.toolbar}

```{ojs}
//| echo: false
viewof prop_ind2 = Inputs.select(new Map(metadata_world.filter(d => d.type == "stock").map((d) => [d.description, d.id])), {label:"Indicator 1 : Circles", value: "TOT_ALL"})
```

```{ojs}
//| echo: false
viewof choro_ind2 = Inputs.select(new Map(metadata_world.filter(d => d.type == "ratio").map((d) => [d.description, d.id])), {label:"Indicator 2: Color palette", value: "RT_POP"})
```

```{ojs}
//| echo: false
viewof k2 = Inputs.range([4, 50], { label: "Circle size", step: 1, value:30 })
```

## Row {width="100%"}

<center>

```{ojs}
//| echo: false
svg2 = viz.create({
    width: 900, 
    domain: world, 
    margin: 0,
    projection: d3.geoNaturalEarth1(),
    zoomable: true})
outline = svg2.outline({id:"outline"});
countries = svg2.path({ datum: world, fill: "white", fillOpacity: 0.3, id: "countries" });
choro = svg2.plot({type: "choro", 
             id:"choro",
            data: world,
            var: choro_ind2,
            colors: "Sunset",
            tip: `$NAMEen`,
            breaks: bks2,
            leg_pos: [0,250],
            leg_title: "Indicator 2",
            leg_frame: true,
            leg_missing_text: "No ascent",
            leg_frame_fill : "white",
            leg_frame_stroke: "#ffffff50"});
prop =  svg2.plot({type: "prop", 
            id:"prop",
            data: world,
            var: prop_ind2,
            tip: `$NAMEen`,
            fill: "#ffffff50",
            k: k2,
            fixmax: valmax2,
            leg_title: "Indicator 1",
            leg_frame: true,
            leg_frame_fill : "white",
            leg_frame_stroke: "#ffffff80"});
svg2.render({order:[outline, countries, choro, prop]})
```

</center>


# Country table {scrolling="true"}

```{ojs}

Inputs.table(data_world, {
  format: {
    POP_2023: sparkbar(d3.max(data_world, d => d.POP_2023)),  
    TOT_ALL: sparkbar(d3.max(data_world, d => d.TOT_ALL)),
    FEMALE_ALL: sparkbar(d3.max(data_world, d => d.TOT_ALL)),
    LEADER_ALL: sparkbar(d3.max(data_world, d => d.TOT_ALL)),
    LEADER_ALL: sparkbar(d3.max(data_world, d => d.TOT_ALL)),
    TOT_BEF_1950: sparkbar(d3.max(data_world, d => d.TOT_ALL)),
    TOT_1950_1969: sparkbar(d3.max(data_world, d => d.TOT_ALL)),
    TOT_1970_1989: sparkbar(d3.max(data_world, d => d.TOT_ALL)),
    TOT_AFT_1990: sparkbar(d3.max(data_world, d => d.TOT_ALL)),
    MED_YEAR: sparkbar(d3.max(data_world, d => d.MED_YEAR)),
    RT_POP: sparkbar(d3.max(data_world, d => d.RT_POP)),
    RT_FEMALE: sparkbar(d3.max(data_world, d => d.RT_FEMALE)),   
    RT_LEADER: sparkbar(d3.max(data_world, d => d.RT_LEADER)),
    RT_1950: sparkbar(d3.max(data_world, d => d.RT_1950)),
    RT_1950_1969: sparkbar(d3.max(data_world, d => d.RT_1950_1969)),   
    RT_1970_1989: sparkbar(d3.max(data_world, d => d.RT_1970_1989)),   
    RT_1990: sparkbar(d3.max(data_world, d => d.RT_1990))
  },
  
  rows:1000
})

```



```{ojs}
//| output: false
 
// Define breaks manually Map 1
bks = metadata
  .find((d) => d.id == choro_ind)
  .breaks.replace("[", "")
  .replace("]", "")
  .split(",")
  .map((d) => parseFloat(d))
  
valmax = metadata
  .find((d) => d.id == prop_ind)
  .breaks.replace("[", "")
  .replace("]", "")
  .split(",")
  .map((d) => parseFloat(d))
```


```{ojs}
//| output: false
 
// Define breaks manually Map2
bks2 = metadata_world
  .find((d) => d.id == choro_ind2)
  .breaks.replace("[", "")
  .replace("]", "")
  .split(",")
  .map((d) => parseFloat(d))
  
valmax2 = metadata_world
  .find((d) => d.id == prop_ind2)
  .breaks.replace("[", "")
  .replace("]", "")
  .split(",")
  .map((d) => parseFloat(d))
```



```{ojs}
//| output: false

// carto
viz = require("geoviz@0.7.2")
dicopal = import("dicopal@0.8.1")

// paramaters
fixmax = d3.max(peaks.map(d => +d[indicator]))

// peaks
metadata = FileAttachment("data_conso/metadata.csv").csv()
data_peaks = peaks.features.map(d => d.properties)
peaks = FileAttachment("data_conso/peak_6700_geoloc_data.geojson").json()


// World data
metadata_world = FileAttachment("data_conso/metadata_world.csv").csv()
data_world = world.features.map(d => d.properties)
world = FileAttachment("data_conso/world_data.geojson").json()
```

```{ojs}
//| output: false
 
// Sparkbar
function sparkbar(max) {
  return x => htl.html`<div style="
    background: lightblue;
    width: ${100 * x / max}%;
    float: right;
    padding-right: 3px;
    box-sizing: border-box;
    overflow: visible;
    display: flex;
    justify-content: end;">${x.toLocaleString("en")}`
}
```
